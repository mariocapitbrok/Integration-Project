// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?

  gAuthCredentials GAuthCredentials?
  asanaAuthCredentials AsanaAuthCredentials?

  filesHaveAccessTo File[]
  commentsAuthored CommentAuthor[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model GAuthCredentials {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int    @unique

  googleId String
  accessToken  String
  refreshToken String
  scope String
  tokenType String
  expiryDate BigInt

  webhookChannelId String?
  webhookChannelExpiration DateTime?
  webhookResourceId String?
  changesPageToken String?

  handle String?

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @updatedAt @default(now())
}

model AsanaAuthCredentials {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int      @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime
}

model File {
  id     Int  @id @default(autoincrement())
  usersWhoHaveAccess User[]

  name String
  platform String?

  googleDriveFile GoogleDriveFile?
  comments Comment[] @relation("file")


  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @updatedAt @default(now())

  createdAt DateTime?
  updatedAt DateTime?
}

model GoogleDriveFile {
  id     Int  @id @default(autoincrement())
  file   File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId Int @unique

  googleId String?
  name String?
  mimeType String?

  createdAt DateTime?
  updatedAt DateTime?

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @updatedAt @default(now())

  @@index([googleId])
}

model Comment {
  // Sets default to cuid but gets overwritten by the id from middleware
  id     String  @id @default(cuid())
  file   File @relation("file", fields: [fileId], references: [id], onDelete: Cascade)
  fileId Int 

  author CommentAuthor @relation(fields: [authorId], references: [id])
  authorId Int

  platform String?
  // Might not have this until later...
  platformId String?
  platformDiscussionId String?
  
  content String

  resolved Boolean @default(false)
  resolvedAt DateTime?

  done Boolean @default(false)
  doneAt DateTime?

  createdAt DateTime?
  updatedAt DateTime?

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @updatedAt @default(now())

  @@index([platformId])
  @@index([platformDiscussionId])
  @@index([createdAt])
}

model CommentAuthor {
  id     Int  @id @default(autoincrement())
  comments Comment[]

  user User? @relation(fields: [userId], references: [id])
  userId Int?

  platformId String?
  platformName String?
  platformEmail String?

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @updatedAt @default(now())

  @@index([userId])
}

model Task {
  id              Int      @id @default(autoincrement())
  gid             String   @unique
  name            String
  resource_type   String
  resource_subtype String
}

model Story {
  id             Int       @id @default(autoincrement())
  gid            String    @unique
  created_at     DateTime
  created_by_gid String
  created_by_name String
  resource_type  String
  text           String
  type           String
  resource_subtype String?
}
